2023-03-16 13:19:39,218 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.3.4.9
	PyTorch: 1.8.2+cu111
	TorchVision: 0.9.2+cu111
2023-03-16 13:19:39,219 INFO: 
  name: DFLOW
  model_type: VideoRecurrentModel
  scale: 4
  num_gpu: 1
  manual_seed: 0
  datasets:[
    test_1:[
      name: Vid4
      type: VideoRecurrentTestDataset
      dataroot_gt: /gdata1/gaors/VSRdataset/Vid4/GT
      dataroot_lq: /gdata1/gaors/VSRdataset/Vid4/BIx4
      cache_data: True
      io_backend:[
        type: disk
      ]
      num_frame: -1
      phase: test
      scale: 4
    ]
  ]
  network_g:[
    type: DFlow
    num_feat: 64
    num_block: 2
    return_wimage: False
  ]
  path:[
    pretrain_network_g: /gdata1/gaors/DFlow_BasicSR/experiments/pretrained_models/dflow.pth
    strict_load_g: True
    results_root: /gdata1/gaors/DFlow_BasicSR/results/DFLOW
    log: /gdata1/gaors/DFlow_BasicSR/results/DFLOW
    visualization: /gdata1/gaors/DFlow_BasicSR/results/DFLOW/visualization
  ]
  val:[
    save_img: True
    flip_seq: False
    center_frame_only: False
    suffix: None
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 0
        test_y_channel: True
      ]
      ssim:[
        type: calculate_ssim
        crop_border: 0
        test_y_channel: True
      ]
    ]
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: False
  is_train: False

2023-03-16 13:19:39,220 INFO: Generate data info for VideoTestDataset - Vid4
2023-03-16 13:19:39,280 INFO: Cache calendar for VideoTestDataset...
2023-03-16 13:19:42,272 INFO: Cache city for VideoTestDataset...
2023-03-16 13:19:44,862 INFO: Cache foliage for VideoTestDataset...
2023-03-16 13:19:47,969 INFO: Cache walk for VideoTestDataset...
2023-03-16 13:19:51,048 INFO: Dataset [VideoRecurrentTestDataset] - Vid4 is built.
2023-03-16 13:19:51,048 INFO: Number of test images in Vid4: 4
2023-03-16 13:19:51,132 INFO: Network [DFlow] is created.
2023-03-16 13:19:55,556 INFO: Network: DFlow, with parameters: 2,950,667
2023-03-16 13:19:55,557 INFO: DFlow(
  (createflowf): IME(
    (lka1): Sequential(
      (0): LKA(
        (proj_1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (activation): GELU()
        (spatial_gating_unit): AttentionModule(
          (conv0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64)
          (conv_spatial): Conv2d(64, 64, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=64)
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (proj_2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): LKA(
        (proj_1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (activation): GELU()
        (spatial_gating_unit): AttentionModule(
          (conv0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64)
          (conv_spatial): Conv2d(64, 64, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=64)
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (proj_2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (lka2): Sequential(
      (0): LKA(
        (proj_1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (activation): GELU()
        (spatial_gating_unit): AttentionModule(
          (conv0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64)
          (conv_spatial): Conv2d(64, 64, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=64)
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (proj_2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): LKA(
        (proj_1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (activation): GELU()
        (spatial_gating_unit): AttentionModule(
          (conv0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64)
          (conv_spatial): Conv2d(64, 64, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=64)
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (proj_2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (lka3): Sequential(
      (0): LKA(
        (proj_1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (activation): GELU()
        (spatial_gating_unit): AttentionModule(
          (conv0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64)
          (conv_spatial): Conv2d(64, 64, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=64)
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (proj_2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): LKA(
        (proj_1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (activation): GELU()
        (spatial_gating_unit): AttentionModule(
          (conv0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64)
          (conv_spatial): Conv2d(64, 64, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=64)
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (proj_2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (conv1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv2): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv3): Conv2d(6, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (convout): Conv2d(192, 2, kernel_size=(1, 1), stride=(1, 1))
  )
  (createflowb): IME(
    (lka1): Sequential(
      (0): LKA(
        (proj_1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (activation): GELU()
        (spatial_gating_unit): AttentionModule(
          (conv0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64)
          (conv_spatial): Conv2d(64, 64, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=64)
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (proj_2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): LKA(
        (proj_1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (activation): GELU()
        (spatial_gating_unit): AttentionModule(
          (conv0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64)
          (conv_spatial): Conv2d(64, 64, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=64)
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (proj_2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (lka2): Sequential(
      (0): LKA(
        (proj_1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (activation): GELU()
        (spatial_gating_unit): AttentionModule(
          (conv0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64)
          (conv_spatial): Conv2d(64, 64, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=64)
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (proj_2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): LKA(
        (proj_1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (activation): GELU()
        (spatial_gating_unit): AttentionModule(
          (conv0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64)
          (conv_spatial): Conv2d(64, 64, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=64)
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (proj_2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (lka3): Sequential(
      (0): LKA(
        (proj_1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (activation): GELU()
        (spatial_gating_unit): AttentionModule(
          (conv0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64)
          (conv_spatial): Conv2d(64, 64, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=64)
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (proj_2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): LKA(
        (proj_1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (activation): GELU()
        (spatial_gating_unit): AttentionModule(
          (conv0): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64)
          (conv_spatial): Conv2d(64, 64, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=64)
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (proj_2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (conv1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv2): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv3): Conv2d(6, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (convout): Conv2d(192, 2, kernel_size=(1, 1), stride=(1, 1))
  )
  (flowconv1): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))
  (flowconv2): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))
  (flowconv31): Conv2d(5, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (flowconv32): Conv2d(5, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (backward_trunk): DFD(
    (inconv): Conv2d(67, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (lrelu): LeakyReLU(negative_slope=0.1, inplace=True)
    (r1): Sequential(
      (0): RFDB(
        (c1_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c1_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c2_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c2_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c3_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c3_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c4): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (c5): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (esa): ESA(
          (conv1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_max): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))
          (conv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv3_): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv4): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (relu): ReLU(inplace=True)
        )
      )
      (1): RFDB(
        (c1_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c1_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c2_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c2_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c3_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c3_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c4): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (c5): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (esa): ESA(
          (conv1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_max): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))
          (conv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv3_): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv4): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (relu): ReLU(inplace=True)
        )
      )
    )
    (conv1): Conv2d(64, 48, kernel_size=(1, 1), stride=(1, 1))
    (r2): Sequential(
      (0): RFDB(
        (c1_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c1_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c2_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c2_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c3_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c3_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c4): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (c5): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (esa): ESA(
          (conv1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_max): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))
          (conv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv3_): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv4): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (relu): ReLU(inplace=True)
        )
      )
      (1): RFDB(
        (c1_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c1_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c2_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c2_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c3_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c3_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c4): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (c5): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (esa): ESA(
          (conv1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_max): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))
          (conv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv3_): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv4): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (relu): ReLU(inplace=True)
        )
      )
    )
    (conv2): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
    (r3): Sequential(
      (0): RFDB(
        (c1_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c1_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c2_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c2_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c3_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c3_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c4): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (c5): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (esa): ESA(
          (conv1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_max): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))
          (conv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv3_): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv4): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (relu): ReLU(inplace=True)
        )
      )
      (1): RFDB(
        (c1_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c1_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c2_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c2_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c3_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c3_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c4): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (c5): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (esa): ESA(
          (conv1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_max): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))
          (conv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv3_): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv4): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (relu): ReLU(inplace=True)
        )
      )
    )
    (conv3): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1))
    (fusion): Conv2d(160, 64, kernel_size=(1, 1), stride=(1, 1))
  )
  (forward_trunk): DFD(
    (inconv): Conv2d(131, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (lrelu): LeakyReLU(negative_slope=0.1, inplace=True)
    (r1): Sequential(
      (0): RFDB(
        (c1_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c1_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c2_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c2_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c3_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c3_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c4): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (c5): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (esa): ESA(
          (conv1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_max): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))
          (conv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv3_): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv4): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (relu): ReLU(inplace=True)
        )
      )
      (1): RFDB(
        (c1_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c1_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c2_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c2_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c3_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c3_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c4): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (c5): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (esa): ESA(
          (conv1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_max): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))
          (conv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv3_): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv4): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (relu): ReLU(inplace=True)
        )
      )
    )
    (conv1): Conv2d(64, 48, kernel_size=(1, 1), stride=(1, 1))
    (r2): Sequential(
      (0): RFDB(
        (c1_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c1_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c2_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c2_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c3_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c3_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c4): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (c5): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (esa): ESA(
          (conv1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_max): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))
          (conv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv3_): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv4): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (relu): ReLU(inplace=True)
        )
      )
      (1): RFDB(
        (c1_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c1_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c2_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c2_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c3_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c3_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c4): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (c5): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (esa): ESA(
          (conv1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_max): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))
          (conv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv3_): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv4): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (relu): ReLU(inplace=True)
        )
      )
    )
    (conv2): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
    (r3): Sequential(
      (0): RFDB(
        (c1_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c1_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c2_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c2_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c3_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c3_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c4): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (c5): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (esa): ESA(
          (conv1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_max): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))
          (conv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv3_): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv4): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (relu): ReLU(inplace=True)
        )
      )
      (1): RFDB(
        (c1_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c1_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c2_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c2_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c3_d): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (c3_r): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (c4): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (c5): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (esa): ESA(
          (conv1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (conv_max): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))
          (conv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv3_): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv4): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (relu): ReLU(inplace=True)
        )
      )
    )
    (conv3): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1))
    (fusion): Conv2d(160, 64, kernel_size=(1, 1), stride=(1, 1))
  )
  (fusion): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
  (upconv1): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (upconv2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_hr): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (pixel_shuffle): PixelShuffle(upscale_factor=2)
  (lrelu): LeakyReLU(negative_slope=0.1, inplace=True)
)
2023-03-16 13:19:57,045 INFO: Loading DFlow model from /gdata1/gaors/DFlow_BasicSR/experiments/pretrained_models/dflow.pth, with param key: [params].
2023-03-16 13:19:57,149 INFO: Model [VideoRecurrentModel] is created.
2023-03-16 13:19:57,149 INFO: Testing Vid4...
2023-03-16 13:19:57,149 WARNING: nondist_validation is not implemented. Run dist_validation.
2023-03-16 13:20:43,728 INFO: Validation Vid4
	 # psnr: 27.2603	 # calendar: 23.9782	 # city: 27.7643	 # foliage: 26.4662	 # walk: 30.8325
	    Best: 27.2603 @ DFLOW iter
	 # ssim: 0.8230	 # calendar: 0.8070	 # city: 0.8048	 # foliage: 0.7685	 # walk: 0.9119
	    Best: 0.8230 @ DFLOW iter

